AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  RestoreImageId:
    Description: Snapshot to be used as root disk - leave this blank when creating the Stack.
    Type: "String"
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: "AWS::EC2::KeyPair::KeyName"
  InstanceType:
    Description: WebServer EC2 instance type
    Type: "String"
    Default: t2.small
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium]
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: VpcId of your existing Virtual Private Cloud (VPC)
  SubnetId:
    Type: "AWS::EC2::Subnet::Id"
    Description: SubnetId of an existing subnet (for the primary network) in your
      Virtual Private Cloud (VPC)
      Cloud.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: "String"
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})

Conditions:
  RestoreImageIdCond: !Not [!Equals [!Ref RestoreImageId, "" ]]

Resources:
  ## Elastic IPs
  EIP0:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIPAssoc0:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref EC2Instance
      AllocationId: !GetAtt [EIP0, AllocationId]

  # Security Groups
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHLocation

  # Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        !If
          - RestoreImageIdCond
          - !Ref RestoreImageId
          - !GetAtt CustomLookupAmi.ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref SubnetId
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  # Custom Resources
  # AMI Lookup
  CustomLookupAmi:
    Type: Custom::LookupAmi
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt LambdaLookupAmi.Arn
      Region: !Ref 'AWS::Region'
  LambdaLookupAmi:
        Type: "AWS::Lambda::Function"
        Properties:
          Handler: index.lambda_handler
          Role: !GetAtt ExecutionRole.Arn
          Runtime: python3.6
          Timeout: 60
          Code:
            ZipFile: |
              import boto3
              import cfnresponse
              from dateutil import parser

              def lambda_handler(event, context):
                  try:
                      if event['RequestType'] == 'Delete':
                        responseData = {'Delete': 'SUCCESS'}
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                      else:
                        region = event['ResourceProperties']['Region']

                        def newest_image(list_of_images):
                            latest = None
                            for image in list_of_images:
                                if not latest:
                                    latest = image
                                    continue
                                if parser.parse(image['CreationDate']) > parser.parse(latest['CreationDate']):
                                    latest = image
                            return latest

                        client = boto3.client('ec2', region_name=region)

                        filters = [{'Name': 'name', 'Values': ['amzn-ami-hvm-*']}, {'Name': 'description', 'Values': ['Amazon Linux AMI*']}, {'Name': 'architecture', 'Values': ['x86_64']}, {'Name': 'owner-alias', 'Values': ['amazon']}, {'Name': 'root-device-type', 'Values': ['ebs']}]
                        response = client.describe_images(Owners=['amazon'], Filters=filters)

                        ami = newest_image(response['Images'])
                        responseData = {'ImageId': ami['ImageId']}
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                  except Exception as e:
                      responseData = {'Error': str(e)}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData)

  # Create AMI Snapshot
  CustomCreateSnap:
    Type: Custom::CreateSnap
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt LambdaCreateSnap.Arn
      InstanceId: !Ref EC2Instance
      Region: !Ref 'AWS::Region'
  LambdaCreateSnap:
        Type: "AWS::Lambda::Function"
        Properties:
          Handler: index.lambda_handler
          Role: !GetAtt ExecutionRole.Arn
          Runtime: python3.6
          Timeout: 120
          Code:
            ZipFile: |
              import boto3
              import cfnresponse

              def lambda_handler(event, context):
                  try:
                      if event['RequestType'] == 'Delete':
                        responseData = {'Delete': 'SUCCESS'}
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                      else:
                        instance = event['ResourceProperties']['InstanceId']
                        region = event['ResourceProperties']['Region']

                        client = boto3.client('ec2', region_name=region)

                        getvolume = client.describe_instances(
                            InstanceIds=[instance],
                        )

                        createami = client.create_image(
                            InstanceId=instance,
                            Name=instance,
                            NoReboot=True
                        )
                        responseData = {'AmiId': createami['ImageId'], 'VolumeId': getvolume['Reservations'][0]['Instances'][0]['BlockDeviceMappings'][0]['Ebs']['VolumeId']}
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                  except Exception as e:
                      responseData = {'Error': str(e)}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData)

  # IAM Execution Role for Lambda Functions
  ExecutionRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: 2008-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - events.amazonaws.com
                  - lambda.amazonaws.com
                  - states.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AdministratorAccess

Outputs:
  EC2Instance:
    Description: EC2 Instance
    Value: !Ref EC2Instance
  EIP:
    Description: Elastic IP
    Value: !Ref EIP0
  VolumeId:
    Description: Volume ID for mock PHD Event
    Value: !GetAtt CustomCreateSnap.VolumeId
  AMI:
    Description: AMI created for backup
    Value: !GetAtt CustomCreateSnap.AmiId