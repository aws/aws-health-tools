AWSTemplateFormatVersion: 2010-09-09
Parameters:
  PublicCidr:
    Type: "String"
    Description: The public IP address that Kibana will be accessible from.
Resources:
#####
#VPC#
#####

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.3.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
  PublicSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  NATGWA:
    DependsOn: InternetGateway
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NATEIPA.AllocationId
      SubnetId: !Ref PublicSubnetA
  NATEIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGWB:
    DependsOn: InternetGateway
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NATEIPB.AllocationId
      SubnetId: !Ref PublicSubnetB
  NATEIPB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  PrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGWA
      RouteTableId: !Ref PrivateRouteTableA
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGWB
      RouteTableId: !Ref PrivateRouteTableB
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateSubnetA:
    DependsOn: PrivateRouteA
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
  PrivateSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetB:
    DependsOn: PrivateRouteB
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.4.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
  PrivateSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB

####
#ES#
####

  ElasticsearchDomain:
    Type: "AWS::Elasticsearch::Domain"
    Properties:
      DomainName: !Sub ${AWS::StackName}-domain
      ElasticsearchVersion: 6.3
      ElasticsearchClusterConfig:
        InstanceCount: 2
        InstanceType: m4.large.elasticsearch
      VPCOptions:
        SubnetIds: 
          - !Ref PrivateSubnetA
        SecurityGroupIds:
          - !Ref ElasticsearchSecurityGroup
      EBSOptions:
        EBSEnabled: true
        VolumeType: gp2
        VolumeSize: 100
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: '*'

  ElasticsearchSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupDescription: Allows internal data loading and public access to Elasticsearch.
        VpcId: !Ref VPC
        SecurityGroupIngress:
          -
            CidrIp: !Ref PublicCidr
            IpProtocol: TCP
            FromPort: 80
            ToPort: 80
          -
            CidrIp: 10.1.0.0/16
            IpProtocol: TCP
            FromPort: 80
            ToPort: 80

  ElasticsearchELB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Type: application
      Subnets: 
        - !Ref PublicSubnetB
        - !Ref PublicSubnetA
      SecurityGroups:
        - !Ref ElasticsearchSecurityGroup

  ElasticsearchELBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 80
      Protocol: HTTP
      HealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 2
      HealthCheckIntervalSeconds: 5
      Targets:
        -
          Id: !GetAtt CustomElasticsearchIp.Ip
          Port: 80
      TargetType: ip
      VpcId: !Ref VPC

  ElasticsearchELBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ElasticsearchELBTargetGroup
      LoadBalancerArn: !Ref ElasticsearchELB

  CustomElasticsearchIp:
    Type: Custom::ElasticsearchIP
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt LambdaElasticsearchIp.Arn
      EsEndpoint: !GetAtt ElasticsearchDomain.DomainEndpoint


  LambdaExecutionRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: 2008-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AdministratorAccess

  LambdaElasticsearchIp:
        Type: "AWS::Lambda::Function"
        Properties:
          Handler: index.lambda_handler
          Role: !GetAtt LambdaExecutionRole.Arn
          Runtime: python3.6
          Timeout: 25
          VpcConfig:
            SubnetIds: 
              - !Ref PrivateSubnetB
              - !Ref PrivateSubnetA 
            SecurityGroupIds:
              - !Ref ElasticsearchSecurityGroup
          Code:
            ZipFile: |
              import socket
              import cfnresponse
              from time import sleep
              def lambda_handler(event, context):
                  try:
                      if event['RequestType'] == 'Delete':
                        responseData = {'Delete': 'SUCCESS'}
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                      else:
                        sleep(1)
                        esEndpoint = event['ResourceProperties']['EsEndpoint']
                        esIp = socket.gethostbyname(esEndpoint)
                        responseData = {'Ip': esIp}
                        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
                  except Exception as e:
                      responseData = {'Error': str(e)}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
Outputs:
  KibanaURL:
    Description: Access URL for Kibana.
    Value:
      !Join
        - ''
        - - 'http://'
          - !GetAtt ElasticsearchELB.DNSName
          - '/_plugin/kibana'
  KibanaWhitelist:
    Description: Public IPs Kibana is accessible from.
    Value: !Ref PublicCidr
  ESDomain:
    Description: ES Domain 
    Value: !GetAtt ElasticsearchDomain.DomainEndpoint
    Export:
      Name: !Sub "${AWS::StackName}-DomainEndpoint"
  ESLambdaSecurityGroup:
    Description: ESLambdaSecurityGroup
    Value: !Ref ElasticsearchSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-ESLambdaSecurityGroup"
  PrivateSubnetA:
    Description: Private Subnet A
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetA"
  PrivateSubnetB:
    Description: Private Subnet B
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetB"
