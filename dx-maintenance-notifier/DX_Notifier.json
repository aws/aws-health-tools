{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters": {
    "EmailAddress": {
	  "Description": "Please enter an email address to subscribe to the SNS topic. To subscribe additional email addresses and for other subscription options, go to SNS >> Topics >> \"DXMaintNotify\" >> Create subscription",
      "Type": "String",
	  "AllowedPattern": "[a-zA-Z0-9_.+-]+@([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9]*\\.)+[a-zA-Z]+",
	  "ConstraintDescription": "Please enter a valid email address for the SNS subscription"
    }
  },    
  "Resources": {
    "LambdaFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
	"SnsTopic": {
	  "Type": "AWS::SNS::Topic",
	  "Properties": {
		  "KmsMasterKeyId": "alias/aws/sns",
		  "DisplayName": "DXMaintNotify",
		  "TopicName" : "DXMaintNotify",
		  "Subscription" : [
			{"Endpoint": {"Ref":"EmailAddress"}, "Protocol": "email"}
			]
		   }
	},
	
	
    "LambdaRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "LambdaPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Stmt1477516473539",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:*:*:*"
            },
            {
              "Sid": "Stmt1484080345748",
              "Action": [
                "sns:Publish"
              ],
              "Effect": "Allow",
              "Resource": {"Ref": "SnsTopic"}
            }
          ]
        },
        "Roles": [
          {
            "Ref": "LambdaFunctionRole"
          }
        ]
      }
    },
	
	
    "SNSPublishFunction": {
	 
      "Type": "AWS::Lambda::Function",
	  "DependsOn" : "SnsTopic",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaFunctionRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "SNS_TOPIC": {
              "Ref": "SnsTopic"
            }
          }
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "// Sample Lambda Function to send notifications to a SNS topic when an AWS Health event happens\n",
                "const { SNSClient, PublishCommand } = require(\"@aws-sdk/client-sns\");\n",
                "const snsClient = new SNSClient();\n",
                "\n",
                "// define configuration\n",
                "const snsTopic = process.env.SNS_TOPIC;",
                "\n",
                "// main function which gets AWS Health data from Cloudwatch event\n",
                "const handler = async (event, context) => {\n",
                "    let healthMessage = `${event.detail.eventDescription[0].latestDescription}. For more details, please see https://phd.aws.amazon.com/phd/home?region=${event.region}#/dashboard/open-issues\n\n",
                "Region: ${event.region}\n",
                "Account Id: ${event.account}\n",
                "Affected Resources:`;\n",
                "\n",
                "    for (let resource of event.resources) {\n",
                "        healthMessage += `\\n${resource}`;\n",
                "    }\n",
                "\n",
                "    healthMessage += `\\n\\nStart Time: ${event.detail.startTime}\\nEnd Time: ${event.detail.endTime}`;\n",
                "\n",
                "    const eventName = event.detail.eventTypeCode;\n",
                "\n",
                "    // prepare message for SNS to publish\n",
                "    const snsPublishParams = {\n",
                "        Message: healthMessage,\n",
                "        Subject: eventName,\n",
                "        TopicArn: snsTopic\n",
                "    };\n",
                "\n",
                "    try {\n",
                "        const command = new PublishCommand(snsPublishParams);\n",
                "        const data = await snsClient.send(command);\n",
                "        const snsPublishSuccessMessage = `Successfully got details from AWS Health event, ${eventName} and published to SNS topic.`;\n",
                "        console.log(snsPublishSuccessMessage, data);\n",
                "        return snsPublishSuccessMessage;\n",
                "    } catch (err) {\n",
                "        const snsPublishErrorMessage = `Error publishing AWS Health event to SNS`;\n",
                "        console.log(snsPublishErrorMessage, err);\n",
                "        throw new Error(snsPublishErrorMessage);\n",
                "    }\n",
                "};\n",
                "\n",
                "module.exports = { handler };\n"
              ]
            ]
          }
        },
        "Runtime": "nodejs22.x",
        "Timeout": "25"
      }
    },
    "LambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SNSPublishFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CloudWatchEventRule",
            "Arn"
          ]
        }
      }
    },
    "CloudWatchEventRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "EventRule",
        "EventPattern": {
  "source": [
    "aws.health"
  ],
  "detail-type": [
    "AWS Health Event"
  ],
  "detail": {
    "service": [
      "DIRECTCONNECT"
    ]
  }
},
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "SNSPublishFunction",
                "Arn"
              ]
            },
            "Id": "SNSPublishFunction"
          }
        ]
      }
    }
  }
}
